/*-
 * Copyright (c) 2011, Seth Kingsley
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 * following conditions are met:
 *
 * • Redistributions of source code must retain the above copyright notice, this list of conditions and the following
 *   disclaimer.
 * • Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
 *   disclaimer in the documentation and/or other materials provided with the distribution.
 * • Neither the name Seth Kingsley nor the names of other contributors may be used to endorse or promote products
 *   derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
#include "SmartfishEngageKeyboard.h"
#include <IOKit/hid/IOHIDUsageTables.h>
#include <IOKit/hid/AppleHIDUsageTables.h>
#include <IOKit/hidsystem/ev_keymap.h>

#define super IOHIDEventDriver

OSDefineMetaClassAndStructors(SmartfishEngageKeyboard, super);

static const unsigned char kVirtualFKeys[] =
{
	kHIDUsage_KeyboardNonUSBackslash, /* USB 0x64, ADB 0x41 */
	kHIDUsage_KeyboardPower,          /* USB 0x66, ADB 0x7f */
	kHIDUsage_KeypadComma,            /* USB 0x85, ADB 0x5f */
	kHIDUsage_KeyboardInternational1, /* USB 0x87, ADB 0x5e */
	kHIDUsage_KeyboardInternational3, /* USB 0x89, ADB 0x5d */
	kHIDUsage_KeyboardF18,            /* USB 0x6d, ADB 0x4f */
	kHIDUsage_KeyboardF19,            /* USB 0x6e, ADB 0x50 */
	kHIDUsage_KeyboardF20,            /* USB 0x6f, ADB 0x5a */
	kHIDUsage_KeyboardLANG2,          /* USB 0x91, ADB 0x66 */
	kHIDUsage_KeyboardMute,           /* USB 0x7f, ADB 0x4a */
	kHIDUsage_KeyboardVolumeDown,     /* USB 0x81, ADB 0x49 */
	kHIDUsage_KeyboardVolumeUp        /* USB 0x80, ADB 0x48 */
};

IOReturn
SmartfishEngageKeyboard::setSystemProperties(OSDictionary *properties)
{
	// Identical to appleUSAFKeyMap from IOHIDKeyboard.cpp, but with Application key -> Fn
	static const unsigned char keyMap[] =
	{
		0x00,0x00,
		
		// Modifier Defs
		0x0b,   //Number of modifier keys.  Was 7
		//0x00,0x01,0x39,  //CAPSLOCK, uses one byte.
		0x01,0x01,0x38,
		0x02,0x01,0x3b,
		0x03,0x01,0x3a,
		0x04,0x01,0x37,
		0x05,0x14,0x52,0x41,0x53,0x54,0x55,0x45,0x58,0x57,0x56,0x5b,0x5c,
		0x43,0x4b,0x51,0x7b,0x7d,0x7e,0x7c,0x4e,0x59,
		0x06,0x01,0x72,
		0x07,0x01,0x6e, //NX_MODIFIERKEY_SECONDARYFN 8th modifier
		0x09,0x01,0x3c, //Right shift
		0x0a,0x01,0x3e, //Right control
		0x0b,0x01,0x3d, //Right Option
		0x0c,0x01,0x36, //Right Command
		
		// key defs
		0xa2,
		0x0d,0x00,0x61,0x00,0x41,0x00,0x01,0x00,0x01,0x00,0xca,0x00,0xc7,0x00,0x01,0x00,0x01, //00
		0x0d,0x00,0x73,0x00,0x53,0x00,0x13,0x00,0x13,0x00,0xfb,0x00,0xa7,0x00,0x13,0x00,0x13, //01
		0x0d,0x00,0x64,0x00,0x44,0x00,0x04,0x00,0x04,0x01,0x44,0x01,0xb6,0x00,0x04,0x00,0x04, //02
		0x0d,0x00,0x66,0x00,0x46,0x00,0x06,0x00,0x06,0x00,0xa6,0x01,0xac,0x00,0x06,0x00,0x06, //03
		0x0d,0x00,0x68,0x00,0x48,0x00,0x08,0x00,0x08,0x00,0xe3,0x00,0xeb,0x00,0x00,0x18,0x00, //04
		0x0d,0x00,0x67,0x00,0x47,0x00,0x07,0x00,0x07,0x00,0xf1,0x00,0xe1,0x00,0x07,0x00,0x07, //05
		0x0d,0x00,0x7a,0x00,0x5a,0x00,0x1a,0x00,0x1a,0x00,0xcf,0x01,0x57,0x00,0x1a,0x00,0x1a, //06
		0x0d,0x00,0x78,0x00,0x58,0x00,0x18,0x00,0x18,0x01,0xb4,0x01,0xce,0x00,0x18,0x00,0x18, //07
		0x0d,0x00,0x63,0x00,0x43,0x00,0x03,0x00,0x03,0x01,0xe3,0x01,0xd3,0x00,0x03,0x00,0x03, //08
		0x0d,0x00,0x76,0x00,0x56,0x00,0x16,0x00,0x16,0x01,0xd6,0x01,0xe0,0x00,0x16,0x00,0x16, //09
		0xff, //0a
		0x0d,0x00,0x62,0x00,0x42,0x00,0x02,0x00,0x02,0x01,0xe5,0x01,0xf2,0x00,0x02,0x00,0x02, //0b
		0x0d,0x00,0x71,0x00,0x51,0x00,0x11,0x00,0x11,0x00,0xfa,0x00,0xea,0x00,0x11,0x00,0x11, //0c
		0x0d,0x00,0x77,0x00,0x57,0x00,0x17,0x00,0x17,0x01,0xc8,0x01,0xc7,0x00,0x17,0x00,0x17, //0d
		0x0d,0x00,0x65,0x00,0x45,0x00,0x05,0x00,0x05,0x00,0xc2,0x00,0xc5,0x00,0x05,0x00,0x05, //0e
		0x0d,0x00,0x72,0x00,0x52,0x00,0x12,0x00,0x12,0x01,0xe2,0x01,0xd2,0x00,0x12,0x00,0x12, //0f
		0x0d,0x00,0x79,0x00,0x59,0x00,0x19,0x00,0x19,0x00,0xa5,0x01,0xdb,0x00,0x19,0x00,0x19, //10
		0x0d,0x00,0x74,0x00,0x54,0x00,0x14,0x00,0x14,0x01,0xe4,0x01,0xd4,0x00,0x14,0x00,0x14, //11
		0x0a,0x00,0x31,0x00,0x21,0x01,0xad,0x00,0xa1, //12
		0x0e,0x00,0x32,0x00,0x40,0x00,0x32,0x00,0x00,0x00,0xb2,0x00,0xb3,0x00,0x00,0x00,0x00, //13
		0x0a,0x00,0x33,0x00,0x23,0x00,0xa3,0x01,0xba, //14
		0x0a,0x00,0x34,0x00,0x24,0x00,0xa2,0x00,0xa8, //15
		0x0e,0x00,0x36,0x00,0x5e,0x00,0x36,0x00,0x1e,0x00,0xb6,0x00,0xc3,0x00,0x1e,0x00,0x1e, //16
		0x0a,0x00,0x35,0x00,0x25,0x01,0xa5,0x00,0xbd, //17
		0x0a,0x00,0x3d,0x00,0x2b,0x01,0xb9,0x01,0xb1, //18
		0x0a,0x00,0x39,0x00,0x28,0x00,0xac,0x00,0xab, //19
		0x0a,0x00,0x37,0x00,0x26,0x01,0xb0,0x01,0xab, //1a
		0x0e,0x00,0x2d,0x00,0x5f,0x00,0x1f,0x00,0x1f,0x00,0xb1,0x00,0xd0,0x00,0x1f,0x00,0x1f, //1b
		0x0a,0x00,0x38,0x00,0x2a,0x00,0xb7,0x00,0xb4, //1c
		0x0a,0x00,0x30,0x00,0x29,0x00,0xad,0x00,0xbb, //1d
		0x0e,0x00,0x5d,0x00,0x7d,0x00,0x1d,0x00,0x1d,0x00,0x27,0x00,0xba,0x00,0x1d,0x00,0x1d, //1e
		0x0d,0x00,0x6f,0x00,0x4f,0x00,0x0f,0x00,0x0f,0x00,0xf9,0x00,0xe9,0x00,0x0f,0x00,0x0f, //1f
		0x0d,0x00,0x75,0x00,0x55,0x00,0x15,0x00,0x15,0x00,0xc8,0x00,0xcd,0x00,0x15,0x00,0x15, //20
		0x0e,0x00,0x5b,0x00,0x7b,0x00,0x1b,0x00,0x1b,0x00,0x60,0x00,0xaa,0x00,0x1b,0x00,0x1b, //21
		0x0d,0x00,0x69,0x00,0x49,0x00,0x09,0x00,0x09,0x00,0xc1,0x00,0xf5,0x00,0x09,0x00,0x09, //22
		0x0d,0x00,0x70,0x00,0x50,0x00,0x10,0x00,0x10,0x01,0x70,0x01,0x50,0x00,0x10,0x00,0x10, //23
		0x10,0x00,0x0d,0x00,0x03, //24
		0x0d,0x00,0x6c,0x00,0x4c,0x00,0x0c,0x00,0x0c,0x00,0xf8,0x00,0xe8,0x00,0x0c,0x00,0x0c, //25
		0x0d,0x00,0x6a,0x00,0x4a,0x00,0x0a,0x00,0x0a,0x00,0xc6,0x00,0xae,0x00,0x0a,0x00,0x0a, //26
		0x0a,0x00,0x27,0x00,0x22,0x00,0xa9,0x01,0xae, //27
		0x0d,0x00,0x6b,0x00,0x4b,0x00,0x0b,0x00,0x0b,0x00,0xce,0x00,0xaf,0x00,0x0b,0x00,0x0b, //28
		0x0a,0x00,0x3b,0x00,0x3a,0x01,0xb2,0x01,0xa2, //29
		0x0e,0x00,0x5c,0x00,0x7c,0x00,0x1c,0x00,0x1c,0x00,0xe3,0x00,0xeb,0x00,0x1c,0x00,0x1c, //2a
		0x0a,0x00,0x2c,0x00,0x3c,0x00,0xcb,0x01,0xa3, //2b
		0x0a,0x00,0x2f,0x00,0x3f,0x01,0xb8,0x00,0xbf, //2c
		0x0d,0x00,0x6e,0x00,0x4e,0x00,0x0e,0x00,0x0e,0x00,0xc4,0x01,0xaf,0x00,0x0e,0x00,0x0e, //2d
		0x0d,0x00,0x6d,0x00,0x4d,0x00,0x0d,0x00,0x0d,0x01,0x6d,0x01,0xd8,0x00,0x0d,0x00,0x0d, //2e
		0x0a,0x00,0x2e,0x00,0x3e,0x00,0xbc,0x01,0xb3, //2f
		0x02,0x00,0x09,0x00,0x19, //30
		0x0c,0x00,0x20,0x00,0x00,0x00,0x80,0x00,0x00, //31
		0x0a,0x00,0x60,0x00,0x7e,0x00,0x60,0x01,0xbb, //32
		0x02,0x00,0x7f,0x00,0x08, //33
		0xff, //34
		0x02,0x00,0x1b,0x00,0x7e, //35
		0xff, //36
		0xff, //37
		0xff, //38
		0xff, //39
		0xff, //3a
		0xff, //3b
		0xff, //3c
		0xff, //3d
		0xff, //3e
		0xff, //3f
		0x00,0xfe,0x36, //40 is F17
		0xff, //41
		0xff, //42
		0x00,0x00,0x2a, //43
		0xff, //44
		0x00,0x00,0x2b, //45
		0xff, //46
		0x00,0x00,0x1b, //47
		0xff, //48
		0xff, //49
		0xff, //4a
		0x0e,0x00,0x2f,0x00,0x5c,0x00,0x2f,0x00,0x1c,0x00,0x2f,0x00,0x5c,0x00,0x00,0x0a,0x00, //4b
		0x00,0x00,0x0d,  //4c //XX03
		0xff, //4d
		0x00,0x00,0x2d, //4e
		0x00,0xfe,0x37, //4f is F18
		0x00,0xfe,0x38, //50 is F19
		0x0e,0x00,0x3d,0x00,0x7c,0x00,0x3d,0x00,0x1c,0x00,0x3d,0x00,0x7c,0x00,0x00,0x18,0x46, //51
		0x00,0x00,0x30, //52
		0x00,0x00,0x31, //53
		0x00,0x00,0x32, //54
		0x00,0x00,0x33, //55
		0x00,0x00,0x34, //56
		0x00,0x00,0x35, //57
		0x00,0x00,0x36, //58
		0x00,0x00,0x37, //59
		0x00,0xfe,0x39, //5a is F20
		0x00,0x00,0x38, //5b
		0x00,0x00,0x39, //5c
		0xff, //5d
		0xff, //5e
		0xff, //5f
		0x00,0xfe,0x24, //60
		0x00,0xfe,0x25, //61
		0x00,0xfe,0x26, //62
		0x00,0xfe,0x22, //63
		0x00,0xfe,0x27, //64
		0x00,0xfe,0x28, //65
		0xff, //66
		0x00,0xfe,0x2a, //67
		0xff, //68
		0x00,0xfe,0x91, //69
		0x00,0xfe,0x82, //6a
		0x00,0xfe,0x90, //6b
		0xff, //6c
		0x00,0xfe,0x29, //6d
		0xff, //6e
		0x00,0xfe,0x2b, //6f
		0xff, //70
		0x00,0xfe,0xa0, //71
		0xff, //72
		0x00,0xfe,0x2e, //73
		0x00,0xfe,0x30, //74
		0x00,0xfe,0x2d, //75
		0x00,0xfe,0x23, //76
		0x00,0xfe,0x2f, //77
		0x00,0xfe,0x21, //78
		0x00,0xfe,0x31, //79
		0x00,0xfe,0x20, //7a
		0x00,0x01,0xac, //ADB=0x7b is left arrow
		0x00,0x01,0xae, //ADB = 0x7c is right arrow
		0x00,0x01,0xaf, //ADB=0x7d is down arrow.  
		0x00,0x01,0xad, //ADB=0x7e is up arrow	 
		
		0x00,0xfe,0x90, 
		0x00,0x00,0x00, 
		0x00,0x00,0x00, // Virtual = 0x81 is Spotlight
		0x00,0x00,0x00, // Virtual = 0x82 is Dashboard
		0x00,0x00,0x00,
		0x00,0x00,0x00,
		0x00,0x00,0x00,
		0x00,0x00,0x00,
		0x00,0x00,0x00,
		0x00,0x00,0x00,
		0x00,0x00,0x00,
		0x00,0x00,0x00,
		0x00,0x00,0x00,
		0x00,0x00,0x00,
		0x00,0x00,0x00,
		0x00,0x00,0x00,
		0x00,0x00,0x00,
		0x00,0x00,0x00, // Virtual = 0x90 is Main Brightness Up
		0x00,0x00,0x00, // Virtual = 0x91 is Main Brightness Down
		0x00,0x00,0x00,
		0x00,0x00,0x00,
		0x00,0x00,0x00,
		0x00,0x00,0x00,
		0x00,0x00,0x00,
		0x00,0x00,0x00,
		0x00,0x00,0x00,
		0x00,0x00,0x00,
		0x00,0x00,0x00,
		0x00,0x00,0x00,
		0x00,0x00,0x00,
		0x00,0x00,0x00,
		0x00,0x00,0x00,
		0x00,0x00,0x00,
		0x00,0x00,0x00, // Virtual = 0xa0 is Exposes All
		0x00,0x00,0x00, // Virtual = 0xa1 is Expose Desktop
		
		0x0f,0x02,0xff,0x04,            
		0x00,0x31,0x02,0xff,0x04,0x00,0x32,0x02,0xff,0x04,0x00,0x33,0x02,0xff,0x04,0x00,
		0x34,0x02,0xff,0x04,0x00,0x35,0x02,0xff,0x04,0x00,0x36,0x02,0xff,0x04,0x00,0x37,
		0x02,0xff,0x04,0x00,0x38,0x02,0xff,0x04,0x00,0x39,0x02,0xff,0x04,0x00,0x30,0x02,
		0xff,0x04,0x00,0x2d,0x02,0xff,0x04,0x00,0x3d,0x02,0xff,0x04,0x00,0x70,0x02,0xff,
		0x04,0x00,0x5d,0x02,0xff,0x04,0x00,0x5b,
		0x08, // following are 7 special keys
		0x04,0x39,  //caps lock
		0x05,0x72,  //NX_KEYTYPE_HELP is 5, ADB code is 0x72
		0x06,0x7f,  //NX_POWER_KEY is 6, ADB code is 0x7f
		0x07,0x4a,  //NX_KEYTYPE_MUTE is 7, ADB code is 0x4a
		0x00,0x48,  //NX_KEYTYPE_SOUND_UP is 0, ADB code is 0x48
		0x01,0x49,  //NX_KEYTYPE_SOUND_DOWN is 1, ADB code is 0x49
		0x0a,0x47,  //NX_KEYTYPE_NUM_LOCK is 10, ADB combines with CLEAR key for numlock
		NX_KEYTYPE_PLAY,0x0a
	};

	IOReturn ret = kIOReturnBadArgument;
	if (properties)
	{
		OSDictionary *propsCopy = OSDictionary::withDictionary(properties);
		OSData *keyMapData = OSData::withBytes(keyMap, sizeof(keyMap));
		propsCopy->setObject(kIOHIDKeyMappingKey, keyMapData);
		keyMapData->release();
#ifdef DEBUG
		IOLog("setSystemProperties(): updating keymap, HIDDeviceParameters = %p\n",
				propsCopy->getObject("HIDDeviceParameters"));
#endif // DEBUG
		ret = super::setSystemProperties(propsCopy);
		propsCopy->release();

		if (properties->getObject(kIOHIDResetKeyboardKey))
			_fKeyState = 0;
	}

	return ret;
}

void
SmartfishEngageKeyboard::dispatchKeyboardEvent(AbsoluteTime timeStamp,
		UInt32 usagePage, UInt32 usage, UInt32 value,
		IOOptionBits options)
{
#ifdef DEBUG
	IOLog("dispatchKeyboardEvent(..., %lu, %lu, %lu, 0x%lx)\n", usagePage, usage, value, options);
#endif // DEBUG

	if (usagePage == kHIDPage_KeyboardOrKeypad)
	{
		// Compensate for difference in interpretation of minValue = 1 between OS X and other OSes:
		if (0 < usage < kHIDUsage_KeyboardLeftControl)
			--usage;

		if (usage == kHIDUsage_KeyboardApplication)
			_fKeyState = (value != 0);
		else if (_fKeyState && kHIDUsage_KeyboardF1 <= usage <= kHIDUsage_KeyboardF12)
			usage = kVirtualFKeys[usage - kHIDUsage_KeyboardF1];
#ifdef DEBUG
		else switch (usage)
		{
			case kHIDUsage_KeyboardLeftAlt: usage = kHIDUsage_KeyboardLeftGUI; break;
			case kHIDUsage_KeyboardLeftGUI: usage = kHIDUsage_KeyboardLeftAlt; break;
			case kHIDUsage_KeyboardRightAlt: usage = kHIDUsage_KeyboardRightGUI; break;
			case kHIDUsage_KeyboardRightGUI: usage = kHIDUsage_KeyboardRightAlt; break;
		}
#endif // DEBUG
	}

	super::dispatchKeyboardEvent(timeStamp, usagePage, usage, value, options);
}
